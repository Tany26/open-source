{
  "version": 3,
  "file": "docs/comps/discussion.js",
  "lineCount": 3,
  "mappings": "AAUEA,QAPmBC,EAOR,CAACC,CAAD,CAAK,CACd,IAAAA,EAAA,CAAUA,CADI,CAPGD,CAInB,KAAA,CAAA,QAAa,CAACE,CAAD,CAAK,CAChBC,CAAA,CAAsDD,CAAtD,CADgB,CAMlB,EAAA,UAAA,OAAAE,CAAAA,QAAM,CAAC,CAAD,CAA8B,CAAA,IAAA,EAAA,IAAA,CAAhBC,EAAb,CAAE,CAAA,SAAA,CAA2B,CAARC,EAArB,CAAqB,KACpBC,EAAAA,CAAIC,QAAAC,cAAA,CAAuB,QAAvB,CACVF,EAAAG,IAAA,CAAQ,wCACRH,EAAAI,OAAA,CAAWC,QAAA,EAAM,CACf,CAAAX,EAAAY,UAAA,CAAoB,EACpBC,OAAA,QAAA,SAAA,CAA8B,CAC5B,KAAQR,CADoB,CAE5B,QAAWD,CAFiB,CAG5B,MAAS,eAHmB,CAI5B,UAAa,CAAAJ,EAAAc,GAJe,CAA9B,CAFe,CASjBP,SAAAQ,KAAAC,YAAA,CAA0BV,CAA1B,CAZkC,CAVvBW,EAAA,OAAA,iBAAA,CAAMlB,CAAN,CAAA,CAAA,MACF,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAUmB,QAAA,EAAA,CACnB,MAAO,CAAA,CADY,CAAV,CADE,CAAA,C,CCFf,IAAMC,GAAa,EAAnB,CAQMC,GAAe,CACnB,iBAAkBC,CADC,CAEnB,SAAYtB,CAFO,CAGnB,eAAgBuB,CAHG,CAInB,iBAAkBC,CAJC,CARrB,CAeMC,GAAKC,CAAA,EAGEC;CAAC,CACZC,IAAK,UADO,CAEZb,GAAI,OAFQ,CAGZc,MAAO,CACL,UAAW,SADN,CAHK,CAADF,CAOb,CACEC,IAAK,gBADP,CAEEb,GAAI,YAFN,CAGEc,MAAO,CACL,UAAW,SADN,CAHT,CAPaF,CAcb,CACEC,IAAK,cADP,CAEEb,GAAI,OAFN,CAGEc,MAAO,CACLC,EAAO,UADF,CAELC,KAAM,aAFD,CAHT,CAdaJ,CAsBb,CACEC,IAAK,gBADP,CAEEb,GAAI,OAFN,CAGEc,MAAO,CACLG,IAAK,wDADA,CAELL,EAAM,CAAA,CAFD,CAGLM,UAAW,WAHN,CAHT,CAtBaN,CA+BbO,QAAA,CAAa,QAAA,CAAC,CAAD,CAA4C,CAAzC,IAAAN,EAAF,CAAE,IAAA,CAAKb,EAAP,CAAO,GAAL,CAASc,EAAA,IAAA,EAAA,GAAX,CAAW,MAAA,CAAQ,EAAR,CAAX,CAAW,MAAT,CAAqBM,EAAA,IAAA,EAAA,GAAvB,CAAuB,SAAA,CAAW,EAAX,CAAvB,CAAuB,SAArB,CACRC,EAAOf,EAAA,CAAaO,CAAb,CADC,CAERT,EAAQiB,CAAAjB,MAARA,EAAuB,cAAAkB,KAAA,CAAoBD,CAAAE,SAAA,EAApB,CAAvBnB,EAA+D,CAACoB,CAAAC,cAAA,CAAwBJ,CAAxB,CACtEP;CAAAY,EAAA,CAAiB,CAAEC,EAAO,eAAT,CAA0B,EAAAC,QAAM,CAACC,CAAD,CAAa,CAC5D,MAAOC,EAAA,CAAgBzB,EAAA,CAAWwB,CAAX,CAAhB,CADqD,CAA7C,CAIL7B,EAAA+B,MAAAC,CAAS,GAATA,CACZb,QAAA,CAAY,QAAA,CAACc,CAAD,CAAQ,CACZ,IAAA,EAAiBC,CAAA,CAAKD,CAAL,CAASpB,CAAT,CAAjB,CAAEsB,EAAA,CAAA,OAAF,CAAUjD,EAAA,CAAA,EAChB,IAAKA,CAAL,CAAA,CACA,IAAMkD,EAAmD,CAAEvB,IAAAA,CAAF,CAAOb,GAAIiC,CAAX,CAAe7B,MAAAA,CAAf,CAAzD,CACIiC,CACJnD,EAAAG,OAAA,CAAYiD,QAAA,EAAM,CAEhB,MADAD,EACA,CADOE,CAAA,CAAMH,CAAN,CAAkBf,CAAlB,CAAwBgB,CAAxB,CAA8BnD,CAA9B,CAAkCiD,CAAlC,CAA0CrB,CAA1C,CAAiDM,CAAjD,CADS,CAIlBlC,EAAAG,OAAAuB,EAAA,CAAiBwB,CACjB1B,GAAA8B,QAAA,CAAWtD,CAAX,CARA,CAFkB,CAApB,CARuD,CAAzD;",
  "sources": [
    "/splendid/components/comments.jsx",
    "/splendid/comps/discussion.js"
  ],
  "sourcesContent": [
    "import { h } from '@externs/preact'\nimport { loadStyle } from '@lemuria/load-scripts'\n\nexport default class Comments {\n  static get 'plain'() {\n    return true\n  }\n  static 'load'(cb) {\n    loadStyle('https://static.akashic.page/comments.css', cb)\n  }\n  constructor(el) {\n    this.el = el\n  }\n  render({ 'api-key': apiKey, host }) {\n    const s = document.createElement('script')\n    s.src = 'https://static.akashic.page/akashic.js'\n    s.onload = () => {\n      this.el.innerText = ''\n      window['Akashic']['comments']({\n        'host': host,\n        'api_key': apiKey,\n        'scope': '/open-source/',\n        'container': this.el.id,\n      })\n    }\n    document.body.appendChild(s)\n  }\n  /**\n   *\n   * @param {Object} param0\n   * @param {Splendid} param0.splendid\n   */\n  async serverRender({ splendid }) {\n    splendid.export()\n    if (splendid.env != 'prod') {\n      splendid.script('node_modules://preact/dist/preact.min.js', false)\n      await splendid.addFile('node_modules://preact/dist/preact.min.js.map')\n    }\n    await splendid.addFile('service-worker.js')\n    return (h('div',{},`Loading comments...`))\n  }\n}\n\n/**\n * @typedef {import('splendid')} Splendid\n */",
    "import makeClassGetter from './__mcg'\nconst renameMaps = {  }\nimport { Component, render, h } from '@externs/preact'\nimport { makeIo, init, start } from './__competent-lib'\nimport AkashicEmails from '../components/akashic-emails.jsx'\nimport Comments from '../components/comments.jsx'\nimport GithubBadge from '../components/github-badge.jsx'\nimport SocialButtons from 'splendid/build/components/social-buttons'\n\nconst __components = {\n  'akashic-emails': AkashicEmails,\n  'comments': Comments,\n  'github-badge': GithubBadge,\n  'social-buttons': SocialButtons,\n}\n\nconst io = makeIo()\n\n/** @type {!Array<!preact.PreactProps>} */\nconst meta = [{\n  key: 'comments',\n  id: 'c3002',\n  props: {\n    'api-key': 'akashic',\n  },\n},\n{\n  key: 'akashic-emails',\n  id: 'emails-div',\n  props: {\n    'api-key': 'akashic',\n  },\n},\n{\n  key: 'github-badge',\n  id: 'ce823',\n  props: {\n    owner: 'art-deco',\n    name: 'open-source',\n  },\n},\n{\n  key: 'social-buttons',\n  id: 'c53f4',\n  props: {\n    url: 'https://art-deco.github.io/open-source/discussion.html',\n    meta: true,\n    className: 'b-xq b-Hk',\n  },\n}]\nmeta.forEach(({ key, id, props = {}, children = [] }) => {\n  const Comp = __components[key]\n  const plain = Comp.plain || (/^\\s*class\\s+/.test(Comp.toString()) && !Component.isPrototypeOf(Comp))\n  props.splendid = { mount: '/open-source/', addCSS(stylesheet) {\n    return makeClassGetter(renameMaps[stylesheet])\n  } }\n\n  const ids = id.split(',')\n  ids.forEach((Id) => {\n    const { parent, el } = init(Id, key)\n    if (!el) return\n    const renderMeta = /** @type {_competent.RenderMeta} */ ({ key, id: Id, plain })\n    let comp\n    el.render = () => {\n      comp = start(renderMeta, Comp, comp, el, parent, props, children, { render, Component, h })\n      return comp\n    }\n    el.render.meta = renderMeta\n    io.observe(el)\n  })\n})\n"
  ],
  "names": [
    "constructor",
    "Comments",
    "el",
    "cb",
    "loadStyle",
    "render",
    "apiKey",
    "host",
    "s",
    "document",
    "createElement",
    "src",
    "onload",
    "s.onload",
    "innerText",
    "window",
    "id",
    "body",
    "appendChild",
    "$jscomp.global.Object.defineProperties",
    "plain",
    "renameMaps",
    "__components",
    "AkashicEmails",
    "GithubBadge",
    "SocialButtons",
    "io",
    "makeIo",
    "meta",
    "key",
    "props",
    "owner",
    "name",
    "url",
    "className",
    "forEach",
    "children",
    "Comp",
    "test",
    "toString",
    "Component",
    "isPrototypeOf",
    "splendid",
    "mount",
    "addCSS",
    "stylesheet",
    "makeClassGetter",
    "split",
    "ids",
    "Id",
    "init",
    "parent",
    "renderMeta",
    "comp",
    "el.render",
    "start",
    "observe"
  ]
}