{
  "version": 3,
  "file": "docs/comps/discussion.js",
  "lineCount": 4,
  "mappings": "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",
  "sources": [
    "/../node_modules/@lemuria/load-scripts/src/Cache.js",
    "/../node_modules/@lemuria/load-scripts/src/inject.js",
    "/splendid/components/comments.jsx",
    "/../node_modules/@lemuria/load-scripts/src/index.js",
    "/splendid/comps/discussion.js"
  ],
  "sourcesContent": [
    "export default class CacheItem {\n  /**\n   * Creates a cache iterm with given inital listeners, and allows to add more listeners.\n   * The listeners are called when `load` and `error` methods are fired on this instance.\n   * @param {!Function} onLoad\n   * @param {!Function} onError\n   */\n  constructor(onLoad, onError) {\n    /**\n     * @type {Event}\n     */\n    this.errored = null\n    /**\n     * @type {Event}\n     */\n    this.loaded = null\n    this.onloads = [onLoad]\n    this.onerrors = [onError]\n  }\n  /**\n   * Adds an onload listener.\n   * @param {!Function} onLoad\n   */\n  addOnLoad(onLoad) {\n    this.onloads.push(onLoad)\n  }\n  /**\n   * Adds an onerror listener.\n   * @param {!Function} onError\n   */\n  addOnError(onError) {\n    this.onerrors.push(onError)\n  }\n  /**\n   * @param {Event} ev\n   */\n  error(ev) {\n    this.errored = ev\n    this.onerrors.forEach((oe) => {\n      oe(ev)\n    })\n  }\n  /**\n   * @param {Event} ev\n   */\n  load(ev) {\n    this.loaded = ev\n    this.onloads.forEach((ol) => {\n      ol(ev)\n    })\n  }\n}\n\n// const abstractLoad = () => {\n\n// }",
    "/* eslint-env browser */\n\n/**\n * Creates a script tag and appends into DOM.\n * @param {string} src\n * @param {!Function} onLoad\n * @param {!Function} onError\n */\nexport const injectScript = (src, onLoad, onError) => {\n  const script = document.createElement('script')\n  script.src = src\n  script.onload = onLoad\n  script.onerror = onError\n  ;(document.head || document.body).appendChild(script)\n}\n\n/**\n * Creates a script tag and appends into DOM.\n * @param {string} src\n * @param {!Function} onLoad\n * @param {!Function} onError\n */\nexport const injectStyle = (src, onLoad, onError) => {\n  const link = document.createElement('link')\n  link.rel = 'stylesheet'\n  link.href = src\n  link.onload = onLoad\n  link.onerror = onError\n  ;(document.head || document.body).appendChild(link)\n}",
    "import { h } from '@externs/preact'\nimport { loadStyle } from '@lemuria/load-scripts'\n/* eslint-env browser */\n\nexport default class Comments {\n  static 'load'(cb) {\n    loadStyle('https://art-deco.github.io/open-source.artdeco.app/comments.css', cb)\n  }\n  render() {\n    const s = document.createElement('script')\n    s.src = 'https://art-deco.github.io/open-source.artdeco.app/comments.js'\n    s.onload = function() {\n      document.getElementById('preact-div').innerText = ''\n      window['comments']({\n        'container': 'preact-div',\n        'scope': '/open-source/',\n        // 'host': 'https://open-source.artdeco.app',\n      })\n    }\n    document.body.appendChild(s)\n    return (h('div',{'id':\"preact-div\"}))\n  }\n  /**\n   *\n   * @param {Object} param0\n   * @param {Splendid} param0.splendid\n   */\n  async serverRender({ splendid }) {\n    splendid.export()\n    if (splendid.env != 'prod') {\n      splendid.script('node_modules://preact/dist/preact.min.js', false)\n      await splendid.addFile('node_modules://preact/dist/preact.min.js.map')\n    }\n    await splendid.addFile('service-worker.js')\n    return (h('div',{'id':\"preact-div\"},`Loading comments...`))\n  }\n}\n\n/**\n * @typedef {import('splendid')} Splendid\n */",
    "import CacheItem from './Cache'\nimport { injectStyle, injectScript } from './inject'\n\n/* eslint-env browser */\n\n/**\n * Loads JSON via XHR.\n * @param {string} url The JSON url to load.\n * @param {function(Error, string=): void} onload The callback when the server returned text and status 200.\n */\nexport const loadJSON = (url, onload) => {\n  const xmlhttp = new XMLHttpRequest()\n\n  xmlhttp.onreadystatechange = function() {\n    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\n      onload(null, xmlhttp.responseText)\n    }\n  }\n  xmlhttp.onerror = (err) => onload(err)\n  xmlhttp.open('GET', url, true)\n  xmlhttp.send()\n}\n\n/**\n * Loads a style by creating the link element.\n * @param {string} url The style url to load.\n * @param {function(Event, Event=): void} onload The callback when the `onload` or `onerror` even was fired on the link, with the first arg being the error event.\n */\nexport const loadStyle = (url, onload) => {\n  const cache = /** @type {CacheItem} */ (STYLES[url])\n  const onLoad = (ev) => onload(null, ev)\n  const onError = (ev) => onload(ev)\n\n  const c = abstractLoader(url, injectStyle, cache, onLoad, onError, url['nocache'])\n  if (c) STYLES[url] = c\n}\n\n/**\n * @param {string} url The URL to load.\n * @param {function(string, !Function, !Function)} loader The function to load URL with.\n * @param {CacheItem} cache The cache item, if exists.\n * @param {!Function} onLoad Callback on load.\n * @param {!Function} onError Callback on error.\n * @param {boolean} [nocache] Whether cache should be skipped.\n */\nfunction abstractLoader(url, loader, cache, onLoad, onError, nocache) {\n  if (nocache) {\n    loader(url, onLoad, onError)\n  } else if (cache && cache.loaded) {\n    onLoad(cache.loaded)\n  } else if (cache && cache.errored) {\n    onError(cache.errored)\n  } else if (cache) {\n    cache.addOnLoad(onLoad)\n    cache.addOnError(onError)\n  } else {\n    const ci = new CacheItem(onLoad, onError)\n    loader(url, (ev) => {\n      ci.load(ev)\n    }, (ev) => {\n      ci.error(ev)\n    })\n    return ci\n  }\n}\n\n/**\n * Loads scripts by creating script elements, appending them to DOM and waiting for onload event. JSON is loaded via XHR. The callback will be called with an array of: event objects for scripts, and responseText for JSON.\n * @param {!Array<string>} scripts Path to scripts, including JSON.\n * @param {function(Error, !Array<!Event|string>=): void} callback The callback to execute when all data is loaded. In case of failure, called with the first error once.\n */\nexport default function loadScripts(scripts, callback) {\n  let error = false, loaded = [], l = 0\n  scripts.forEach((src, i) => {\n    const onLoad = (res) => {\n      if (error) return\n      l++\n      loaded[i] = res\n      if (l == scripts.length) callback(null, loaded)\n    }\n    const onError = (err) => {\n      if (error) return\n      error = err\n      callback(err)\n    }\n    if (src.endsWith('.json')) {\n      loadJSON(src, (err, result) => {\n        if (err) onError(err)\n        else onLoad(result)\n      })\n      return\n    }\n    loadScript(src, onLoad, onError)\n  })\n}\n\nconst SCRIPTS = {}\nconst STYLES = {}\n\n/**\n * Loads script accounting for cache.\n * @param {string} src\n * @param {!Function} onLoad\n * @param {!Function} onError\n */\nconst loadScript = (src, onLoad, onError) => {\n  const cache = /** @type {CacheItem} */ (SCRIPTS[src])\n\n  const c = abstractLoader(src, injectScript, cache, onLoad, onError, src['nocache'])\n  if (c) SCRIPTS[src] = c\n}\n",
    "import makeClassGetter from './__mcg'\nconst renameMaps = {  }\nimport { Component, render, h } from '@externs/preact'\nimport { makeIo, init, start } from './__competent-lib'\nimport Comments from '../components/comments.jsx'\nimport GithubBadge from '../components/github-badge.jsx'\nimport SocialButtons from 'splendid/build/components/social-buttons'\n\nconst __components = {\n  'comments': Comments,\n  'github-badge': GithubBadge,\n  'social-buttons': SocialButtons,\n}\n\nconst io = makeIo()\n\n/** @type {!Array<!preact.PreactProps>} */\nconst meta = [{\n  key: 'github-badge',\n  id: 'ce823',\n  props: {\n    owner: 'art-deco',\n    name: 'open-source',\n  },\n},\n{\n  key: 'social-buttons',\n  id: 'c53f4',\n  props: {\n    url: 'https://art-deco.github.io/open-source/discussion.html',\n    meta: true,\n    className: 'b-xq b-Hk',\n  },\n},\n{\n  key: 'comments',\n  id: 'preact-div',\n}]\nmeta.forEach(({ key, id, props = {}, children = [] }) => {\n  const Comp = __components[key]\n  const plain = Comp.plain || (/^\\s*class\\s+/.test(Comp.toString()) && !Component.isPrototypeOf(Comp))\n  props.splendid = { mount: '/open-source/', addCSS(stylesheet) {\n    return makeClassGetter(renameMaps[stylesheet])\n  } }\n\n  const ids = id.split(',')\n  ids.forEach((Id) => {\n    const { parent, el } = init(Id, key)\n    if (!el) return\n    const renderMeta = /** @type {_competent.RenderMeta} */ ({ key, id: Id, plain })\n    let comp\n    el.render = () => {\n      comp = start(renderMeta, Comp, comp, el, parent, props, children, { render, Component, h })\n      return comp\n    }\n    el.render.meta = renderMeta\n    io.observe(el)\n  })\n})\n"
  ],
  "names": [
    "constructor",
    "CacheItem",
    "onLoad",
    "onError",
    "loaded",
    "errored",
    "onloads",
    "onerrors",
    "error",
    "ev",
    "forEach",
    "oe",
    "load",
    "ol",
    "injectStyle",
    "link",
    "document",
    "createElement",
    "rel",
    "href",
    "url",
    "onload",
    "onerror",
    "appendChild",
    "head",
    "body",
    "loadStyle",
    "c",
    "abstractLoader",
    "STYLES",
    "cache",
    "nocache",
    "push",
    "ci",
    "Comments",
    "cb",
    "render",
    "s",
    "src",
    "s.onload",
    "getElementById",
    "innerText",
    "window",
    "h",
    "renameMaps",
    "__components",
    "GithubBadge",
    "SocialButtons",
    "io",
    "makeIo",
    "meta",
    "key",
    "id",
    "props",
    "owner",
    "name",
    "className",
    "children",
    "Comp",
    "plain",
    "test",
    "toString",
    "Component",
    "isPrototypeOf",
    "splendid",
    "mount",
    "addCSS",
    "stylesheet",
    "makeClassGetter",
    "split",
    "ids",
    "Id",
    "init",
    "parent",
    "el",
    "renderMeta",
    "comp",
    "el.render",
    "start",
    "observe"
  ]
}